name: dast
on:
  workflow_dispatch:   # run it manually from the Actions tab

permissions:
  contents: read

jobs:
  zap:
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline scan (public demo target)
        id: zap
        uses: zaproxy/action-baseline@v0.12.0
        continue-on-error: true          # never mark the job red
        with:
          target: http://testphp.vulnweb.com/   # demo site; change to your staging later
          allow_issue_writing: false            # don't try to open GitHub Issues
          fail_action: false                    # don't fail on alerts
          cmd_options: "-a -J -r zap.html"      # safe active checks + JSON + HTML output

      - name: Ensure report files exist (fallbacks)
        if: always()
        run: |
          [ -s zap.html ] || echo '<html><body><h3>No HTML from ZAP; see report_json.json</h3></body></html>' > zap.html
          [ -s report_json.json ] || echo '{"site":[],"alerts":[]}' > report_json.json
          ls -lah zap.html report_json.json

      - name: ZAP summary (always)
        if: always()
        run: |
          echo "## ZAP target" >> $GITHUB_STEP_SUMMARY
          echo "http://testphp.vulnweb.com/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Risk | Alert | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
          if command -v jq >/dev/null; then
            jq -r '.site[].alerts[] | "| \(.riskdesc) | \(.name) | \(.count) |"' report_json.json >> $GITHUB_STEP_SUMMARY \
              || echo "| (no alerts) |  | 0 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "_jq not available; open the artifact to view results_" >> $GITHUB_STEP_SUMMARY

      - name: Upload reports (HTML + JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap.html
            report_json.json
